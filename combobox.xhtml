<template text="">
    <style>
        ::slotted(*) {
            display: none;
        }

        .dropdown.form-input > button.form-control::after {
            left: 1.25rem;
            border-width: 0 1px 1px 0 !important;
            scale: 1.5;
            margin: auto;
            position: relative;
        }

        .dropdown.form-input > .dropdown-menu {
            padding: 0;
            width: 100%;
            position: absolute;
            inset: 0px auto auto 0px;
            margin: 0px; /*
                                transform: translate(0px, 0px);
                                top: 57px !important;*/
            top: 100%;
        }

        .filtered option.hidden {
            display: none;
        }

        option.disabled {
            opacity: .65;
        }

        .dropdown.form-input input[type=text]:focus {
            color: silver !important
        }

        .combobox .dropdown-toggle:after {
            border: solid !important;
            border-width: 0 2px 2px 0 !important;
            display: inline-block !important;
            padding: 2px !important;
            transform: rotate( 45deg ) !important;
        }

        .combobox .dropdown-menu {
            box-shadow: var(--combobox-menu-boxshadow, var(--menu-boxshadow, 5px 5px 10px 2px rgb(0,0,0,.5)))
        }

        .combobox input[type=search]::-webkit-search-cancel-button {
            display: none;
        }

        .combobox [data-bs-toggle] [type=search]:focus {
            color: darkgray;
        }
    </style>
    <script>
        constructor.extend({
            init() {
                if (!(this.parts.search && this.parts.select)) return;
                this.value = [...this.parts.select.selectedOptions].map(option => option.value).join(", ") || this.value || "";
                this.text = [...this.parts.select.selectedOptions].map(option => option.text).join(", ") || this.text || "";
            }
            , selectOption() {
                let dropdown = this.parts.body;
                let combo = this.parts.select;
                combo.classList.remove("filtered");
                let selectedOptions = this.parts.select.selectedOptions;
                let input = this.parts.search;
                input.searchText = ''
                input.value = [...selectedOptions].map(option => option.text).join(", ");
                let value = [...selectedOptions].map(option => option.getAttributeNode("value") || option.text || document.createElement('p').getAttributeNode("value")).join(", ");
                //if (value) this.scope.set(value);
                this.value = value;
                this.text = input.value;
                if (input === input.ownerDocument.activeElement) input.blur()

                let toggler = dropdown.querySelector("[data-bs-toggle]");
                try {
                    if (toggler) {
                        toggler = (bootstrap.Dropdown.getOrCreateInstance(toggler))
                        toggler.hide();
                    }
                } catch (e) { }
            }
            , value: {
                set(input) {
                    //this.parts.select.value = input;
                    this.setAttribute("value", input)
                }
            }
            , text: {
                set(input) {
                    this.setAttribute("text", input)
                }
            } 
        })

        xo.components.combobox = xo.components.combobox || {};

        xo.components.combobox.focusin = function () {
            event.preventDefault(); event.stopPropagation();
            let host = this.host;
            let srcElement = this;
            let input = host.parts.search;
            input.value = this.searchText || host.text || '';
            this.placeholder = host.text || '';
            let opened_menus = [...document.querySelectorAll(`.combobox .dropdown-menu.show`)].filter(element => element.closest('.dropdown') != srcElement.closest('.dropdown'));
            for (let menu of opened_menus) {
                let dropdown = menu.closest('.dropdown')
                let toggler = dropdown && dropdown.querySelector("[data-bs-toggle]");
                if (toggler) {
                    try {
                        toggler = (bootstrap.Dropdown.getOrCreateInstance(toggler))
                        toggler.hide();
                    } catch (e) { }
                }
            }
        }

        xo.listener.on('focusin::.combobox [data-bs-toggle]:not(.show) [type=search],body', xo.components.combobox.focusin)

        xo.listener.on('focusout', function () {
            this.justLostFocus = true
            xo.delay(100).then(() => {
                delete this.justLostFocus
            })
        })

        xo.components.combobox.filter = function (event) {
            let host = this.host;
            if (host.constructor != constructor) return;
            let self = this;
            let input = host.parts.search;
            if (event.type == 'input') {
                host.parts.dropdown.classList.add("show");
                input.searchText = input.value;
            }
            let searchText = ['focus', 'focusin'].includes(event.type) ? (input.searchText || input.value) : input.value || '';
            //console.log(event.type+': '+input.searchText)
            let dropdown = host.parts.body;
            let optionsList = self.ownerDocument.contains(self.optionsList) && self.optionsList || dropdown.querySelector('.dropdown-menu');
            self.optionsList = optionsList;
            let options = optionsList.querySelectorAll("li,option");
            optionsList.classList.remove("filtered");
            let option_group = optionsList.querySelector("optgroup");
            option_group && option_group.setAttribute("label", searchText && `Resultados para "${searchText}"` || "Selecciona")
            let filtered = false;
            for (let option of options) {
                if (!searchText || option.classList.contains("hint")) {
                    option.classList.remove("hidden");
                } else if (option.classList.contains("disabled")) {
                    option.classList.add("hidden");
                    filtered = true
                } else if (option.textContent.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase().includes(searchText.normalize('NFD').replace(/[\u0300-\u036f]|_|%/g, "").toLowerCase())) {
                    option.classList.remove("hidden");
                } else {
                    filtered = true
                    option.classList.add("hidden");
                }
            }
            filtered && optionsList.classList.add("filtered");
        }

        xo.listener.on(`input::.combobox [type=search]`, xo.components.combobox.filter);
        xo.listener.on('focusin::.combobox [data-bs-toggle]:not(.show) [type=search]', xo.components.combobox.filter);

        xo.components.combobox.change = function () {
            this.host.selectOption()
        }

        xo.components.combobox.keyup = function (event) {
            let host = this.host;
            if (host.constructor != constructor) return;
            if ([' '].includes(event.key) && !event.ctrlKey) {
                event.preventDefault()
                event.stopImmediatePropagation();
            }
            if ((event.ctrlKey || event.altKey && !['ArrowDown'].includes(event.key) || event.shiftKey) || !['ArrowDown', 'ArrowUp', 'Escape', 'End', 'Home', 'PageDown', 'PageUp'].includes(event.key)) return;
            let self = event.srcElement;
            let dropdown = host.parts.body;
            let optionsList = self.optionsList || dropdown.querySelector('.dropdown-menu');
            self.optionsList = optionsList;

            filtered_options = optionsList.querySelectorAll("li, option").toArray().filter(option => !(option.style.display == 'none' || option.matches('.hidden')));

            if (event.key == 'Escape') {
                optionsList.classList.remove('show');
            } else {
                optionsList.classList.add('show');
            }
            let active_item = filtered_options.toArray().filter(option => option.selected || !option.disabled && !option.classList.contains("disabled") && option.classList.contains("active")).pop();
            let active_item_index = filtered_options.toArray().findIndex(option => option === active_item);
            if (event.key == 'ArrowDown') {
                ++active_item_index;
                active_item_index = active_item_index >= filtered_options.length ? filtered_options.length - 1 : active_item_index;
            } else if (event.key == 'ArrowUp') {
                --active_item_index;
                active_item_index = active_item_index < 0 ? 0 : active_item_index;
            } else if (event.key == 'Home') {
                active_item_index = 0
            } else if (event.key == 'End') {
                active_item_index = filtered_options.length - 1
            } else if (event.key == 'PageDown') {
                active_item_index += active_item.closest('select,ul').size || 10;
                active_item_index = active_item_index >= filtered_options.length ? filtered_options.length - 1 : active_item_index;
            } else if (event.key == 'PageUp') {
                active_item_index -= active_item.closest('select,ul').size || 10;
                active_item_index = active_item_index < 0 ? 0 : active_item_index;
            }
            active_item = filtered_options[active_item_index];
            [...filtered_options].forEach(op => op.classList.remove("active"));
            active_item && active_item.classList.add("active");
            if (active_item instanceof HTMLOptionElement) active_item.selected = true;
            //if (event.key=='Tab') {
            //	active_item && active_item.click();
            //	/*active_item && active_item.closest('.autocomplete-box').scope.set(active_item.classList.contains//("disabled")? "" : active_item.textContent)*/
            //	optionsList.classList.remove('show');
            //}
        };
        xo.listener.on('keyup::.combobox [type=search]', xo.components.combobox.keyup)

        xo.components.combobox.keydown = function (event) {
            let host = this.host;
            if (host.constructor != constructor) return;
            if (!['Tab', 'Enter'].includes(event.key)) return;
            let dropdown = host.parts.body;
            let optionsList = dropdown && dropdown.querySelector('.dropdown-menu.show');
            if (!optionsList) return;
            let toggler = dropdown.querySelector("[data-bs-toggle]");
            toggler && new bootstrap.Dropdown(toggler).hide();
            let active_item = optionsList.querySelectorAll("li, option").toArray().filter(option => !(option.disabled || option.classList.contains("disabled")) && (option.selected || option.classList.contains("active"))).pop();
            this.host.selectOption(active_item);
        }
        xo.listener.on('keydown::.combobox [type=search]', xo.components.combobox.keydown)
        xo.listener.on('keydown::button.combobox', function () {
            debugger
        })

        xo.listener.on('click::.dropdown li', function () {
            let active_item = this;
            active_item && active_item.closest('.autocomplete-box').scope.set(active_item.classList.contains("disabled") ? "" : active_item.textContent);
            optionsList.classList.remove('show');
        })

        xo.listener.on('hide.bs.dropdown', function () {
            let host = this.host || {};
            if (host.constructor != constructor) return;
            let input = host.parts.search;
            input.value = input.value || input.placeholder || '';
            if (this !== document.activeElement && this.contains(document.activeElement)) {
                event.preventDefault();
            }
        })

        xo.listener.on('shown.bs.dropdown', function () {
            let host = this.host || {};
            if (host.constructor != constructor) return;
            let input = host.parts.search;
            let select = host.parts.select;
            input.value = input.searchText || '';
            !input.searchText && select.querySelectorAll(`.hidden,.active`).forEach(el => el.classList.remove("hidden", "active"));
            input.focus();
            (select.selectedOptions[0] || document.createElement('p')).scrollIntoView();

        })
    </script>
    <div part="body" class="dropdown form-input form-control combobox" style="min-width: 19ch; display: flex; position: relative; flex: 1 1 auto; padding: 0; border: none !important;">
        <button class="btn btn-lg dropdown-toggle form-control" xo-static="@*" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="display:flex; padding: 0; background: transparent; padding-right: 2.5rem; top: 0;" tabindex="-1" onfocus="let input = this.querySelector('[type=search]'); input !== document.activeElement &amp;&amp; !input.justLostFocus &amp;&amp; this.querySelector('input').focus();">
            <div class="form-group input-group" style="min-width: calc(19ch + 6rem);border: none;">
                <input part="search" type="search" name="" class="form-control" autocomplete="off" aria-autocomplete="none" maxlength="" size="" value="{{@text}}" style="border: 0 solid transparent !important; background: transparent;"/>
            </div>
        </button>
        <ul part="dropdown" class="dropdown-menu context" style="width: 100%;" aria-labelledby="dropdownMenuLink" xo-static="@* -@xo-scope">
            <select part="select" class="form-select data-rows" xo-static="@*" size="10" tabindex="-1" onchange="xo.components.combobox.change.call(this)">
                <slot></slot>
            </select>
        </ul>
    </div>
</template>